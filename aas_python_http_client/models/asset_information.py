# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class AssetInformation(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'asset_kind': 'AssetKind',
        'global_asset_id': 'str',
        'specific_asset_ids': 'list[SpecificAssetId]',
        'asset_type': 'str',
        'default_thumbnail': 'Resource'
    }

    attribute_map = {
        'asset_kind': 'assetKind',
        'global_asset_id': 'globalAssetId',
        'specific_asset_ids': 'specificAssetIds',
        'asset_type': 'assetType',
        'default_thumbnail': 'defaultThumbnail'
    }

    def __init__(self, asset_kind=None, global_asset_id=None, specific_asset_ids=None, asset_type=None, default_thumbnail=None):  # noqa: E501
        """AssetInformation - a model defined in Swagger"""  # noqa: E501
        self._asset_kind = None
        self._global_asset_id = None
        self._specific_asset_ids = None
        self._asset_type = None
        self._default_thumbnail = None
        self.discriminator = None
        self.asset_kind = asset_kind
        if global_asset_id is not None:
            self.global_asset_id = global_asset_id
        if specific_asset_ids is not None:
            self.specific_asset_ids = specific_asset_ids
        if asset_type is not None:
            self.asset_type = asset_type
        if default_thumbnail is not None:
            self.default_thumbnail = default_thumbnail

    @property
    def asset_kind(self):
        """Gets the asset_kind of this AssetInformation.  # noqa: E501


        :return: The asset_kind of this AssetInformation.  # noqa: E501
        :rtype: AssetKind
        """
        return self._asset_kind

    @asset_kind.setter
    def asset_kind(self, asset_kind):
        """Sets the asset_kind of this AssetInformation.


        :param asset_kind: The asset_kind of this AssetInformation.  # noqa: E501
        :type: AssetKind
        """
        if asset_kind is None:
            raise ValueError("Invalid value for `asset_kind`, must not be `None`")  # noqa: E501

        self._asset_kind = asset_kind

    @property
    def global_asset_id(self):
        """Gets the global_asset_id of this AssetInformation.  # noqa: E501


        :return: The global_asset_id of this AssetInformation.  # noqa: E501
        :rtype: str
        """
        return self._global_asset_id

    @global_asset_id.setter
    def global_asset_id(self, global_asset_id):
        """Sets the global_asset_id of this AssetInformation.


        :param global_asset_id: The global_asset_id of this AssetInformation.  # noqa: E501
        :type: str
        """

        self._global_asset_id = global_asset_id

    @property
    def specific_asset_ids(self):
        """Gets the specific_asset_ids of this AssetInformation.  # noqa: E501


        :return: The specific_asset_ids of this AssetInformation.  # noqa: E501
        :rtype: list[SpecificAssetId]
        """
        return self._specific_asset_ids

    @specific_asset_ids.setter
    def specific_asset_ids(self, specific_asset_ids):
        """Sets the specific_asset_ids of this AssetInformation.


        :param specific_asset_ids: The specific_asset_ids of this AssetInformation.  # noqa: E501
        :type: list[SpecificAssetId]
        """

        self._specific_asset_ids = specific_asset_ids

    @property
    def asset_type(self):
        """Gets the asset_type of this AssetInformation.  # noqa: E501


        :return: The asset_type of this AssetInformation.  # noqa: E501
        :rtype: str
        """
        return self._asset_type

    @asset_type.setter
    def asset_type(self, asset_type):
        """Sets the asset_type of this AssetInformation.


        :param asset_type: The asset_type of this AssetInformation.  # noqa: E501
        :type: str
        """

        self._asset_type = asset_type

    @property
    def default_thumbnail(self):
        """Gets the default_thumbnail of this AssetInformation.  # noqa: E501


        :return: The default_thumbnail of this AssetInformation.  # noqa: E501
        :rtype: Resource
        """
        return self._default_thumbnail

    @default_thumbnail.setter
    def default_thumbnail(self, default_thumbnail):
        """Sets the default_thumbnail of this AssetInformation.


        :param default_thumbnail: The default_thumbnail of this AssetInformation.  # noqa: E501
        :type: Resource
        """

        self._default_thumbnail = default_thumbnail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AssetInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssetInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
