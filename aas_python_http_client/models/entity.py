# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from aas_python_http_client.models.submodel_element import SubmodelElement  # noqa: F401,E501

class Entity(SubmodelElement):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'statements': 'list[SubmodelElementChoice]',
        'entity_type': 'EntityType',
        'global_asset_id': 'str',
        'specific_asset_ids': 'list[SpecificAssetId]',
        'model_type': 'str'
    }
    if hasattr(SubmodelElement, "swagger_types"):
        swagger_types.update(SubmodelElement.swagger_types)

    attribute_map = {
        'statements': 'statements',
        'entity_type': 'entityType',
        'global_asset_id': 'globalAssetId',
        'specific_asset_ids': 'specificAssetIds',
        'model_type': 'modelType'
    }
    if hasattr(SubmodelElement, "attribute_map"):
        attribute_map.update(SubmodelElement.attribute_map)

    def __init__(self, statements=None, entity_type=None, global_asset_id=None, specific_asset_ids=None, model_type=None, *args, **kwargs):  # noqa: E501
        """Entity - a model defined in Swagger"""  # noqa: E501
        self._statements = None
        self._entity_type = None
        self._global_asset_id = None
        self._specific_asset_ids = None
        self._model_type = None
        self.discriminator = None
        if statements is not None:
            self.statements = statements
        self.entity_type = entity_type
        if global_asset_id is not None:
            self.global_asset_id = global_asset_id
        if specific_asset_ids is not None:
            self.specific_asset_ids = specific_asset_ids
        if model_type is not None:
            self.model_type = model_type
        SubmodelElement.__init__(self, *args, **kwargs)

    @property
    def statements(self):
        """Gets the statements of this Entity.  # noqa: E501


        :return: The statements of this Entity.  # noqa: E501
        :rtype: list[SubmodelElementChoice]
        """
        return self._statements

    @statements.setter
    def statements(self, statements):
        """Sets the statements of this Entity.


        :param statements: The statements of this Entity.  # noqa: E501
        :type: list[SubmodelElementChoice]
        """

        self._statements = statements

    @property
    def entity_type(self):
        """Gets the entity_type of this Entity.  # noqa: E501


        :return: The entity_type of this Entity.  # noqa: E501
        :rtype: EntityType
        """
        return self._entity_type

    @entity_type.setter
    def entity_type(self, entity_type):
        """Sets the entity_type of this Entity.


        :param entity_type: The entity_type of this Entity.  # noqa: E501
        :type: EntityType
        """
        if entity_type is None:
            raise ValueError("Invalid value for `entity_type`, must not be `None`")  # noqa: E501

        self._entity_type = entity_type

    @property
    def global_asset_id(self):
        """Gets the global_asset_id of this Entity.  # noqa: E501


        :return: The global_asset_id of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._global_asset_id

    @global_asset_id.setter
    def global_asset_id(self, global_asset_id):
        """Sets the global_asset_id of this Entity.


        :param global_asset_id: The global_asset_id of this Entity.  # noqa: E501
        :type: str
        """

        self._global_asset_id = global_asset_id

    @property
    def specific_asset_ids(self):
        """Gets the specific_asset_ids of this Entity.  # noqa: E501


        :return: The specific_asset_ids of this Entity.  # noqa: E501
        :rtype: list[SpecificAssetId]
        """
        return self._specific_asset_ids

    @specific_asset_ids.setter
    def specific_asset_ids(self, specific_asset_ids):
        """Sets the specific_asset_ids of this Entity.


        :param specific_asset_ids: The specific_asset_ids of this Entity.  # noqa: E501
        :type: list[SpecificAssetId]
        """

        self._specific_asset_ids = specific_asset_ids

    @property
    def model_type(self):
        """Gets the model_type of this Entity.  # noqa: E501


        :return: The model_type of this Entity.  # noqa: E501
        :rtype: str
        """
        return self._model_type

    @model_type.setter
    def model_type(self, model_type):
        """Sets the model_type of this Entity.


        :param model_type: The model_type of this Entity.  # noqa: E501
        :type: str
        """

        self._model_type = model_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Entity, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Entity):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
