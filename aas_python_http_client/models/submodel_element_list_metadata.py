# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from aas_python_http_client.models.submodel_element_attributes import SubmodelElementAttributes  # noqa: F401,E501

class SubmodelElementListMetadata(SubmodelElementAttributes):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'order_relevant': 'bool',
        'semantic_id_list_element': 'Reference',
        'type_value_list_element': 'ModelType',
        'value_type_list_element': 'DataTypeDefXsd'
    }
    if hasattr(SubmodelElementAttributes, "swagger_types"):
        swagger_types.update(SubmodelElementAttributes.swagger_types)

    attribute_map = {
        'order_relevant': 'orderRelevant',
        'semantic_id_list_element': 'semanticIdListElement',
        'type_value_list_element': 'typeValueListElement',
        'value_type_list_element': 'valueTypeListElement'
    }
    if hasattr(SubmodelElementAttributes, "attribute_map"):
        attribute_map.update(SubmodelElementAttributes.attribute_map)

    def __init__(self, order_relevant=None, semantic_id_list_element=None, type_value_list_element=None, value_type_list_element=None, *args, **kwargs):  # noqa: E501
        """SubmodelElementListMetadata - a model defined in Swagger"""  # noqa: E501
        self._order_relevant = None
        self._semantic_id_list_element = None
        self._type_value_list_element = None
        self._value_type_list_element = None
        self.discriminator = None
        if order_relevant is not None:
            self.order_relevant = order_relevant
        if semantic_id_list_element is not None:
            self.semantic_id_list_element = semantic_id_list_element
        if type_value_list_element is not None:
            self.type_value_list_element = type_value_list_element
        if value_type_list_element is not None:
            self.value_type_list_element = value_type_list_element
        SubmodelElementAttributes.__init__(self, *args, **kwargs)

    @property
    def order_relevant(self):
        """Gets the order_relevant of this SubmodelElementListMetadata.  # noqa: E501


        :return: The order_relevant of this SubmodelElementListMetadata.  # noqa: E501
        :rtype: bool
        """
        return self._order_relevant

    @order_relevant.setter
    def order_relevant(self, order_relevant):
        """Sets the order_relevant of this SubmodelElementListMetadata.


        :param order_relevant: The order_relevant of this SubmodelElementListMetadata.  # noqa: E501
        :type: bool
        """

        self._order_relevant = order_relevant

    @property
    def semantic_id_list_element(self):
        """Gets the semantic_id_list_element of this SubmodelElementListMetadata.  # noqa: E501


        :return: The semantic_id_list_element of this SubmodelElementListMetadata.  # noqa: E501
        :rtype: Reference
        """
        return self._semantic_id_list_element

    @semantic_id_list_element.setter
    def semantic_id_list_element(self, semantic_id_list_element):
        """Sets the semantic_id_list_element of this SubmodelElementListMetadata.


        :param semantic_id_list_element: The semantic_id_list_element of this SubmodelElementListMetadata.  # noqa: E501
        :type: Reference
        """

        self._semantic_id_list_element = semantic_id_list_element

    @property
    def type_value_list_element(self):
        """Gets the type_value_list_element of this SubmodelElementListMetadata.  # noqa: E501


        :return: The type_value_list_element of this SubmodelElementListMetadata.  # noqa: E501
        :rtype: ModelType
        """
        return self._type_value_list_element

    @type_value_list_element.setter
    def type_value_list_element(self, type_value_list_element):
        """Sets the type_value_list_element of this SubmodelElementListMetadata.


        :param type_value_list_element: The type_value_list_element of this SubmodelElementListMetadata.  # noqa: E501
        :type: ModelType
        """

        self._type_value_list_element = type_value_list_element

    @property
    def value_type_list_element(self):
        """Gets the value_type_list_element of this SubmodelElementListMetadata.  # noqa: E501


        :return: The value_type_list_element of this SubmodelElementListMetadata.  # noqa: E501
        :rtype: DataTypeDefXsd
        """
        return self._value_type_list_element

    @value_type_list_element.setter
    def value_type_list_element(self, value_type_list_element):
        """Sets the value_type_list_element of this SubmodelElementListMetadata.


        :param value_type_list_element: The value_type_list_element of this SubmodelElementListMetadata.  # noqa: E501
        :type: DataTypeDefXsd
        """

        self._value_type_list_element = value_type_list_element

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmodelElementListMetadata, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmodelElementListMetadata):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
