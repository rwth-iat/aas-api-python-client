# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class HasSemantics(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'semantic_id': 'Reference',
        'supplemental_semantic_ids': 'list[Reference]'
    }

    attribute_map = {
        'semantic_id': 'semanticId',
        'supplemental_semantic_ids': 'supplementalSemanticIds'
    }

    def __init__(self, semantic_id=None, supplemental_semantic_ids=None):  # noqa: E501
        """HasSemantics - a model defined in Swagger"""  # noqa: E501
        self._semantic_id = None
        self._supplemental_semantic_ids = None
        self.discriminator = None
        if semantic_id is not None:
            self.semantic_id = semantic_id
        if supplemental_semantic_ids is not None:
            self.supplemental_semantic_ids = supplemental_semantic_ids

    @property
    def semantic_id(self):
        """Gets the semantic_id of this HasSemantics.  # noqa: E501


        :return: The semantic_id of this HasSemantics.  # noqa: E501
        :rtype: Reference
        """
        return self._semantic_id

    @semantic_id.setter
    def semantic_id(self, semantic_id):
        """Sets the semantic_id of this HasSemantics.


        :param semantic_id: The semantic_id of this HasSemantics.  # noqa: E501
        :type: Reference
        """

        self._semantic_id = semantic_id

    @property
    def supplemental_semantic_ids(self):
        """Gets the supplemental_semantic_ids of this HasSemantics.  # noqa: E501


        :return: The supplemental_semantic_ids of this HasSemantics.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._supplemental_semantic_ids

    @supplemental_semantic_ids.setter
    def supplemental_semantic_ids(self, supplemental_semantic_ids):
        """Sets the supplemental_semantic_ids of this HasSemantics.


        :param supplemental_semantic_ids: The supplemental_semantic_ids of this HasSemantics.  # noqa: E501
        :type: list[Reference]
        """

        self._supplemental_semantic_ids = supplemental_semantic_ids

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(HasSemantics, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, HasSemantics):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
