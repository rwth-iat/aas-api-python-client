# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EmbeddedDataSpecification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'data_specification': 'Reference',
        'data_specification_content': 'DataSpecificationContentChoice'
    }

    attribute_map = {
        'data_specification': 'dataSpecification',
        'data_specification_content': 'dataSpecificationContent'
    }

    def __init__(self, data_specification=None, data_specification_content=None):  # noqa: E501
        """EmbeddedDataSpecification - a model defined in Swagger"""  # noqa: E501
        self._data_specification = None
        self._data_specification_content = None
        self.discriminator = None
        self.data_specification = data_specification
        self.data_specification_content = data_specification_content

    @property
    def data_specification(self):
        """Gets the data_specification of this EmbeddedDataSpecification.  # noqa: E501


        :return: The data_specification of this EmbeddedDataSpecification.  # noqa: E501
        :rtype: Reference
        """
        return self._data_specification

    @data_specification.setter
    def data_specification(self, data_specification):
        """Sets the data_specification of this EmbeddedDataSpecification.


        :param data_specification: The data_specification of this EmbeddedDataSpecification.  # noqa: E501
        :type: Reference
        """
        if data_specification is None:
            raise ValueError("Invalid value for `data_specification`, must not be `None`")  # noqa: E501

        self._data_specification = data_specification

    @property
    def data_specification_content(self):
        """Gets the data_specification_content of this EmbeddedDataSpecification.  # noqa: E501


        :return: The data_specification_content of this EmbeddedDataSpecification.  # noqa: E501
        :rtype: DataSpecificationContentChoice
        """
        return self._data_specification_content

    @data_specification_content.setter
    def data_specification_content(self, data_specification_content):
        """Sets the data_specification_content of this EmbeddedDataSpecification.


        :param data_specification_content: The data_specification_content of this EmbeddedDataSpecification.  # noqa: E501
        :type: DataSpecificationContentChoice
        """
        if data_specification_content is None:
            raise ValueError("Invalid value for `data_specification_content`, must not be `None`")  # noqa: E501

        self._data_specification_content = data_specification_content

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EmbeddedDataSpecification, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EmbeddedDataSpecification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
