# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from aas_python_http_client.models.has_data_specification import HasDataSpecification  # noqa: F401,E501

class AdministrativeInformation(HasDataSpecification):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'version': 'str',
        'revision': 'str',
        'creator': 'Reference',
        'template_id': 'str'
    }
    if hasattr(HasDataSpecification, "swagger_types"):
        swagger_types.update(HasDataSpecification.swagger_types)

    attribute_map = {
        'version': 'version',
        'revision': 'revision',
        'creator': 'creator',
        'template_id': 'templateId'
    }
    if hasattr(HasDataSpecification, "attribute_map"):
        attribute_map.update(HasDataSpecification.attribute_map)

    def __init__(self, version=None, revision=None, creator=None, template_id=None, *args, **kwargs):  # noqa: E501
        """AdministrativeInformation - a model defined in Swagger"""  # noqa: E501
        self._version = None
        self._revision = None
        self._creator = None
        self._template_id = None
        self.discriminator = None
        if version is not None:
            self.version = version
        if revision is not None:
            self.revision = revision
        if creator is not None:
            self.creator = creator
        if template_id is not None:
            self.template_id = template_id
        HasDataSpecification.__init__(self, *args, **kwargs)

    @property
    def version(self):
        """Gets the version of this AdministrativeInformation.  # noqa: E501


        :return: The version of this AdministrativeInformation.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AdministrativeInformation.


        :param version: The version of this AdministrativeInformation.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def revision(self):
        """Gets the revision of this AdministrativeInformation.  # noqa: E501


        :return: The revision of this AdministrativeInformation.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this AdministrativeInformation.


        :param revision: The revision of this AdministrativeInformation.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def creator(self):
        """Gets the creator of this AdministrativeInformation.  # noqa: E501


        :return: The creator of this AdministrativeInformation.  # noqa: E501
        :rtype: Reference
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this AdministrativeInformation.


        :param creator: The creator of this AdministrativeInformation.  # noqa: E501
        :type: Reference
        """

        self._creator = creator

    @property
    def template_id(self):
        """Gets the template_id of this AdministrativeInformation.  # noqa: E501


        :return: The template_id of this AdministrativeInformation.  # noqa: E501
        :rtype: str
        """
        return self._template_id

    @template_id.setter
    def template_id(self, template_id):
        """Sets the template_id of this AdministrativeInformation.


        :param template_id: The template_id of this AdministrativeInformation.  # noqa: E501
        :type: str
        """

        self._template_id = template_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(AdministrativeInformation, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AdministrativeInformation):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
