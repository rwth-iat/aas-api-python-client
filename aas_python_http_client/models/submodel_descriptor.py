# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six
from aas_python_http_client.models.descriptor import Descriptor  # noqa: F401,E501

class SubmodelDescriptor(Descriptor):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'administration': 'AdministrativeInformation',
        'endpoints': 'list[Endpoint]',
        'id_short': 'str',
        'id': 'str',
        'semantic_id': 'Reference',
        'supplemental_semantic_id': 'list[Reference]'
    }
    if hasattr(Descriptor, "swagger_types"):
        swagger_types.update(Descriptor.swagger_types)

    attribute_map = {
        'administration': 'administration',
        'endpoints': 'endpoints',
        'id_short': 'idShort',
        'id': 'id',
        'semantic_id': 'semanticId',
        'supplemental_semantic_id': 'supplementalSemanticId'
    }
    if hasattr(Descriptor, "attribute_map"):
        attribute_map.update(Descriptor.attribute_map)

    def __init__(self, administration=None, endpoints=None, id_short=None, id=None, semantic_id=None, supplemental_semantic_id=None, *args, **kwargs):  # noqa: E501
        """SubmodelDescriptor - a model defined in Swagger"""  # noqa: E501
        self._administration = None
        self._endpoints = None
        self._id_short = None
        self._id = None
        self._semantic_id = None
        self._supplemental_semantic_id = None
        self.discriminator = None
        if administration is not None:
            self.administration = administration
        self.endpoints = endpoints
        if id_short is not None:
            self.id_short = id_short
        self.id = id
        if semantic_id is not None:
            self.semantic_id = semantic_id
        if supplemental_semantic_id is not None:
            self.supplemental_semantic_id = supplemental_semantic_id
        Descriptor.__init__(self, *args, **kwargs)

    @property
    def administration(self):
        """Gets the administration of this SubmodelDescriptor.  # noqa: E501


        :return: The administration of this SubmodelDescriptor.  # noqa: E501
        :rtype: AdministrativeInformation
        """
        return self._administration

    @administration.setter
    def administration(self, administration):
        """Sets the administration of this SubmodelDescriptor.


        :param administration: The administration of this SubmodelDescriptor.  # noqa: E501
        :type: AdministrativeInformation
        """

        self._administration = administration

    @property
    def endpoints(self):
        """Gets the endpoints of this SubmodelDescriptor.  # noqa: E501


        :return: The endpoints of this SubmodelDescriptor.  # noqa: E501
        :rtype: list[Endpoint]
        """
        return self._endpoints

    @endpoints.setter
    def endpoints(self, endpoints):
        """Sets the endpoints of this SubmodelDescriptor.


        :param endpoints: The endpoints of this SubmodelDescriptor.  # noqa: E501
        :type: list[Endpoint]
        """
        if endpoints is None:
            raise ValueError("Invalid value for `endpoints`, must not be `None`")  # noqa: E501

        self._endpoints = endpoints

    @property
    def id_short(self):
        """Gets the id_short of this SubmodelDescriptor.  # noqa: E501


        :return: The id_short of this SubmodelDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._id_short

    @id_short.setter
    def id_short(self, id_short):
        """Sets the id_short of this SubmodelDescriptor.


        :param id_short: The id_short of this SubmodelDescriptor.  # noqa: E501
        :type: str
        """

        self._id_short = id_short

    @property
    def id(self):
        """Gets the id of this SubmodelDescriptor.  # noqa: E501


        :return: The id of this SubmodelDescriptor.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SubmodelDescriptor.


        :param id: The id of this SubmodelDescriptor.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def semantic_id(self):
        """Gets the semantic_id of this SubmodelDescriptor.  # noqa: E501


        :return: The semantic_id of this SubmodelDescriptor.  # noqa: E501
        :rtype: Reference
        """
        return self._semantic_id

    @semantic_id.setter
    def semantic_id(self, semantic_id):
        """Sets the semantic_id of this SubmodelDescriptor.


        :param semantic_id: The semantic_id of this SubmodelDescriptor.  # noqa: E501
        :type: Reference
        """

        self._semantic_id = semantic_id

    @property
    def supplemental_semantic_id(self):
        """Gets the supplemental_semantic_id of this SubmodelDescriptor.  # noqa: E501


        :return: The supplemental_semantic_id of this SubmodelDescriptor.  # noqa: E501
        :rtype: list[Reference]
        """
        return self._supplemental_semantic_id

    @supplemental_semantic_id.setter
    def supplemental_semantic_id(self, supplemental_semantic_id):
        """Sets the supplemental_semantic_id of this SubmodelDescriptor.


        :param supplemental_semantic_id: The supplemental_semantic_id of this SubmodelDescriptor.  # noqa: E501
        :type: list[Reference]
        """

        self._supplemental_semantic_id = supplemental_semantic_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SubmodelDescriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SubmodelDescriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
