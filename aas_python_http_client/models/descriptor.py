# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class Descriptor(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'list[LangStringTextType]',
        'display_name': 'list[LangStringNameType]',
        'extensions': 'list[Extension]'
    }

    attribute_map = {
        'description': 'description',
        'display_name': 'displayName',
        'extensions': 'extensions'
    }

    def __init__(self, description=None, display_name=None, extensions=None):  # noqa: E501
        """Descriptor - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._display_name = None
        self._extensions = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if display_name is not None:
            self.display_name = display_name
        if extensions is not None:
            self.extensions = extensions

    @property
    def description(self):
        """Gets the description of this Descriptor.  # noqa: E501


        :return: The description of this Descriptor.  # noqa: E501
        :rtype: list[LangStringTextType]
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Descriptor.


        :param description: The description of this Descriptor.  # noqa: E501
        :type: list[LangStringTextType]
        """

        self._description = description

    @property
    def display_name(self):
        """Gets the display_name of this Descriptor.  # noqa: E501


        :return: The display_name of this Descriptor.  # noqa: E501
        :rtype: list[LangStringNameType]
        """
        return self._display_name

    @display_name.setter
    def display_name(self, display_name):
        """Sets the display_name of this Descriptor.


        :param display_name: The display_name of this Descriptor.  # noqa: E501
        :type: list[LangStringNameType]
        """

        self._display_name = display_name

    @property
    def extensions(self):
        """Gets the extensions of this Descriptor.  # noqa: E501


        :return: The extensions of this Descriptor.  # noqa: E501
        :rtype: list[Extension]
        """
        return self._extensions

    @extensions.setter
    def extensions(self, extensions):
        """Sets the extensions of this Descriptor.


        :param extensions: The extensions of this Descriptor.  # noqa: E501
        :type: list[Extension]
        """

        self._extensions = extensions

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Descriptor, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Descriptor):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
