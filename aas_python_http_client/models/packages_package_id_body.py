# coding: utf-8

"""
    DotAAS Part 2 | HTTP/REST | Entire API Collection

    All APIs of the Specification of the [Specification of the Asset Administration Shell: Part 2](http://industrialdigitaltwin.org/en/content-hub) in one collection. Please not that this API is not intended to generate productive code but only for overview purposes.   Publisher: Industrial Digital Twin Association (IDTA) 2023\"  # noqa: E501

    OpenAPI spec version: V3.0.1
    Contact: info@idtwin.org
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PackagesPackageIdBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'aas_ids': 'list[str]',
        'file': 'str',
        'file_name': 'str'
    }

    attribute_map = {
        'aas_ids': 'aasIds',
        'file': 'file',
        'file_name': 'fileName'
    }

    def __init__(self, aas_ids=None, file=None, file_name=None):  # noqa: E501
        """PackagesPackageIdBody - a model defined in Swagger"""  # noqa: E501
        self._aas_ids = None
        self._file = None
        self._file_name = None
        self.discriminator = None
        if aas_ids is not None:
            self.aas_ids = aas_ids
        if file is not None:
            self.file = file
        if file_name is not None:
            self.file_name = file_name

    @property
    def aas_ids(self):
        """Gets the aas_ids of this PackagesPackageIdBody.  # noqa: E501


        :return: The aas_ids of this PackagesPackageIdBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._aas_ids

    @aas_ids.setter
    def aas_ids(self, aas_ids):
        """Sets the aas_ids of this PackagesPackageIdBody.


        :param aas_ids: The aas_ids of this PackagesPackageIdBody.  # noqa: E501
        :type: list[str]
        """

        self._aas_ids = aas_ids

    @property
    def file(self):
        """Gets the file of this PackagesPackageIdBody.  # noqa: E501


        :return: The file of this PackagesPackageIdBody.  # noqa: E501
        :rtype: str
        """
        return self._file

    @file.setter
    def file(self, file):
        """Sets the file of this PackagesPackageIdBody.


        :param file: The file of this PackagesPackageIdBody.  # noqa: E501
        :type: str
        """

        self._file = file

    @property
    def file_name(self):
        """Gets the file_name of this PackagesPackageIdBody.  # noqa: E501


        :return: The file_name of this PackagesPackageIdBody.  # noqa: E501
        :rtype: str
        """
        return self._file_name

    @file_name.setter
    def file_name(self, file_name):
        """Sets the file_name of this PackagesPackageIdBody.


        :param file_name: The file_name of this PackagesPackageIdBody.  # noqa: E501
        :type: str
        """

        self._file_name = file_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PackagesPackageIdBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PackagesPackageIdBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
